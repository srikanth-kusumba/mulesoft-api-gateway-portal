@page "/createcontract"
<PageTitle>API Contracts</PageTitle>

@*@attribute [Authorize(Roles = "mulesoft_admin")]*@

@using ControlPlane.Data.GatewayModels;
@using ControlPlane.IntegrationServices.AnyPointPlatform;
@using ControlPlane.Component;

@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject PlatformAPIService PlatformAPIService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h5>Create API contracts</h5>
<hr />

@if (filteredapiManagerAssets == null)
{
    <p><em>Loading...</em></p>
    <div class="spinner-border"></div>
}
else
{
    <div class="row">
        <div class="col">
                @Status
        </div>
    </div>
    <hr />

    <div class="table-responsive">
        <GridView Items="filteredapiManagerAssets" ReloadList="@IsGridViewFiltered">
            <GridColumns>
                <GridColumn ColumnTitle="Asset Id" OnSearchTextChanged="@(e=>OnSearchTextChanged(e,"AssetId"))"></GridColumn>
                <GridColumn ColumnTitle="API Id" OnSearchTextChanged="@(e=>OnSearchTextChanged(e,"APIId"))"></GridColumn>
                <GridColumn ColumnTitle="Status" OnSearchTextChanged="@(e=>OnSearchTextChanged(e,"Status"))"></GridColumn>
                <GridColumn ColumnTitle="Applications" HideSeachText=true></GridColumn>
                <GridColumn ColumnTitle="Create Contract" HideSeachText=true></GridColumn>
            </GridColumns>
            <GridRow Context="asset">
                <td style="text-align:center">
                    @asset.AssetId
                </td>
                 <td style="text-align:center">
                    <a href="deployapi/@asset.AssetId">@asset.Apis[0].Id</a>
                </td>
                <td style="text-align:center">
                    <span class="d-inline-block text-truncate">
                        @asset.Apis[0].Status
                    </span>
                </td>
                <td>
                    <select class="form-control" @onchange="ApplicationChanged">
                        <option value=""></option>
                            @if (appList != null)
                            {
                                @foreach (var app in appList)
                                {
                                 <option value="@app.Id"> @app.Name </option>
                                }
                            }
                    </select>
                </td>
                <td>                  
                   @if ((asset.Apis[0].Status.ToLower() == "active"))
                    {
                        <button class="btn" @onclick="@(e=>Contract_Click(@asset.AssetId))"><i class="oi oi-paperclip"></i></button>
                    }
                </td>
            </GridRow>
        </GridView>

         @if (isDialogOpen)
         {
             <ConfirmDialog Caption="API Contract created" Message="@message"
                     OnClose="@OnDialogClose" Type="ConfirmDialog.Category.Okay" >
                 </ConfirmDialog>
         }
    </div>
}

@code {
    private APIManagerAPIs apiManagerAPIsObject { get; set; }
    private List<Asset>? apiManagerAssets { get; set; }
    private List<Asset>? filteredapiManagerAssets { get; set; }
    public bool IsGridViewFiltered { get; set; }
    public string AssetIdSearchText { get; set; }
    public string AssetStatusSearchText { get; set; }
    private string assetTobeDeleted { get; set; }
    protected string anypoint_token = "";
    public string Status { get; set; }
    public List<ApplicationResponse>? appList { get; set; }
    public long selectedAppId { get; set; }
    public string selectedAppName { get; set; }
    private Asset currentAsset { get; set; }
    private bool isDialogOpen { get; set; } = false;
    private string message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        anypoint_token = await sessionStorage.GetItemAsync<string>("anypoint_token");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var anypointIdentity = authState.User.Identity.Name;

        if (anypointIdentity != null)
        {
            apiManagerAPIsObject = await PlatformAPIService.GetAPIManagerAssetsAsync(anypoint_token);
            apiManagerAssets = apiManagerAPIsObject.Assets.Where(x => x.Apis[0].Status.ToLower() == "active").ToList();;
            filteredapiManagerAssets = apiManagerAssets;

            appList = await PlatformAPIService.GetApplicationsAsync(anypoint_token);
        }
        else
        {
            Status = "Please login to AnyPoint to publish an asset";
        }
    }

    private void OnSearchTextChanged(ChangeEventArgs changedEventArgs, string columnTitle)
    {
        string searchText = changedEventArgs.Value.ToString();

        if (columnTitle == "AssetId")
        {
            AssetIdSearchText = searchText;
        }
        else if (columnTitle == "Status")
        {
            AssetStatusSearchText = searchText;
        }

        filteredapiManagerAssets = apiManagerAssets.Where(li => (string.IsNullOrEmpty(AssetIdSearchText) || li.AssetId.Contains(AssetIdSearchText, StringComparison.OrdinalIgnoreCase)) &&
                                     (string.IsNullOrEmpty(AssetStatusSearchText) || li.Apis[0].Status.Contains(AssetStatusSearchText, StringComparison.OrdinalIgnoreCase))).ToList();

        IsGridViewFiltered = true;
    }


    protected void ApplicationChanged(ChangeEventArgs appEvent)
    {
        Status = "";
        selectedAppId = Convert.ToInt64(appEvent.Value.ToString());
        selectedAppName = appList.Where(x => x.Id == selectedAppId).First().Name;
    }

    protected async void Contract_Click(string assetId)
    {
        currentAsset = apiManagerAssets.Where(x => x.AssetId == assetId).First();

        bool result = await PlatformAPIService.CreateAPIContractAsyc(selectedAppId, currentAsset,anypoint_token);

        if (result)
        {
            Status = "API Contract created between the application " + selectedAppName + " and the API " + currentAsset.ExchangeAssetName;
            OpenDialog();
            StateHasChanged();
        }
    }

    private void OpenDialog()
    {
        isDialogOpen = true;
        message = "API Contract created between the application "+ selectedAppName +" and the API " + currentAsset.ExchangeAssetName;
    }

    private async Task OnDialogClose(ConfirmDto isConfirm)
    {
        isDialogOpen = false;
    }

}
