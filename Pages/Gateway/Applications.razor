@page "/applications"

<PageTitle>Client Applications</PageTitle>

@*@attribute [Authorize(Roles = "mulesoft_admin")]*@

@using ControlPlane.Data.GatewayModels;
@using ControlPlane.IntegrationServices.AnyPointPlatform;

@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject PlatformAPIService PlatformAPIService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h5>Client Applications</h5>
<hr />

<EditForm Model="@requestModel">
<div class="row">
        <div class="col">
            <a data-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
                <i class="fas fa-user-plus">Create New Application</i>
            </a>
        </div>
</div>
<div class="collapse" id="collapseExample">
    <div class="card-body">
        <p class="card-text">
            Application Name: <InputText class="form-control" @bind-Value="requestModel.Name" />
        </p>
        <p class="card-text">
            Description: <InputText class="form-control" @bind-Value="requestModel.Description" />
        </p>
        <p class="card-text">
            <button id="btnSave" class="btn btn-primary" @onclick="CreateApplication">Create</button>
        </p>
        <p class="card-text">
            <div class="fa-left fas fa-sync-alt spinning w-50" hidden="@hideSpinner">
            Processing...<div class="spinner-border"></div>
            </div>
        </p>
        <p class="card-text">
            <div hidden="@boolHideDiv">
                <label for="inputStatus" style="color:indianred">@Status</label>
            </div>
        </p>
        </div>
</div>
</EditForm>

<hr />

@if (filteredApplications == null)
{
    <p><em>Loading...</em></p>
    <div class="spinner-border"></div>
}
else
{
    
    <div class="table-responsive">
        <GridView Items="filteredApplications" ReloadList="@IsGridViewFiltered">
            <GridColumns>
                
                <GridColumn ColumnTitle="Application Name" OnSearchTextChanged="@(e=>OnSearchTextChanged(e,"AppName"))"></GridColumn>
                <GridColumn ColumnTitle="Description" HideSeachText=true></GridColumn>
                <GridColumn ColumnTitle="Delete" HideSeachText=true></GridColumn>
            </GridColumns>
            <GridRow Context="app">
                
                <td>
                        @app.Name
                </td>
                <td style="text-align:center">
                        @app.Description
                </td>
                <td>                    
                    <button class="btn" @onclick="@(e=>Delete_Click(@app.Id))"><i class="oi oi-trash"></i></button>
                </td>
            </GridRow>
        </GridView>
        <ConfirmMsg @ref="DeleteConfirmation" ConfirmationChanged="ConfirmDelete_Click"
                ConfirmationMessage=@($"Are you sure you want to delete this interface...?")>
        </ConfirmMsg>

    </div>
}

@code {

    private ApplicationRequest requestModel { get; set; }
    private List<ApplicationResponse>? applications { get; set; }
    private List<ApplicationResponse>? filteredApplications { get; set; }
    public bool IsGridViewFiltered { get; set; }
    public string ApplicationNameSearchText { get; set; }
    private ConfirmBase DeleteConfirmation { get; set; }
    protected string anypoint_token = "";
    public string Status { get; set; }
    protected string Title = "Add";
    private bool boolHideDiv { get; set; } = true;
    private bool hideSpinner { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        requestModel = new ApplicationRequest();

        anypoint_token = await sessionStorage.GetItemAsync<string>("anypoint_token");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var anypointIdentity = authState.User.Identity.Name;

        if (anypointIdentity != null)
        {
            applications = await PlatformAPIService.GetApplicationsAsync(anypoint_token);
            filteredApplications = applications;
        }
        else
        {
            Status = "Please (re)login to AnyPoint to List applications";
        }
    }

    private void OnSearchTextChanged(ChangeEventArgs changedEventArgs, string columnTitle)
    {
        string searchText = changedEventArgs.Value.ToString();

        if (columnTitle == "AppName")
        {
            ApplicationNameSearchText = searchText;
        }


        filteredApplications = applications.Where(li => (string.IsNullOrEmpty(ApplicationNameSearchText) || li.Name.Contains(ApplicationNameSearchText, StringComparison.OrdinalIgnoreCase))).ToList();

        IsGridViewFiltered = true;
    }

    protected async void Deploy_Click(long assetId)
    {
        var currentAsset = applications.Where(x => x.Id == assetId).First();
        //await PlatformAPIService.DeployAPIManagerAPI(currentAsset.Apis[0].Id.ToString(), currentAsset.Apis[0].InstanceLabel, anypoint_token);
    }

    protected async void Delete_Click(long assetId)
    {
        //assetTobeDeleted = assetId;
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            //await DeleteInterface(assetTobeDeleted);
        }
    }

    public async Task DeleteInterface(string assetTobeDeleted)
    {
        //hideSpinner = false;
        //var currentRow = configItems.Where(x => x.Id == assetTobeDeleted).First();
        //await ConfigService.DeleteSystemsControlItemByIdAsync(currentRow);
        //IsGridViewFiltered = true;
        //configItems = await ConfigService.GetSystemControlAsync();
        //filteredConfigItems = configItems;
        //StateHasChanged();
        //Navigation.NavigateTo("/systemcontrol");
        //System.Threading.Thread.Sleep(20000);
        //hideSpinner = true;
    }

    protected async void CreateApplication()
    {
        boolHideDiv = true;
        hideSpinner = false;
        requestModel.GrantTypes.Add("client_credentials");
        var appResponse = await PlatformAPIService.CreateAppliationAsync(requestModel, anypoint_token);
        applications = await PlatformAPIService.GetApplicationsAsync(anypoint_token);
        filteredApplications = applications;
        IsGridViewFiltered = true;
        Status = appResponse.Name + " application created successfully; Please store the credentials securely; These can not be retrieved again from this portal: client ID: "+ appResponse.ClientId +" & secret:" +appResponse.ClientSecret;
        boolHideDiv = false;
        hideSpinner = true;
        StateHasChanged();
    }

}
