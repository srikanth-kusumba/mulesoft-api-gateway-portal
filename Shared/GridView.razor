@typeparam TItem
<div class="col-12 row">
    <div>
        <table class="table table-bordered table-striped mb-0">
            <thead class="bg-secondary">
                <tr>
                    @GridColumns
                </tr>
            </thead>
            <tbody>
                @*style="color:#0171AD"*@
                @foreach (var item in ItemList)
                {
                    <tr>
                        @GridRow(item)
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<br />
@if(@Items.Count>10)
{
<div class="d-flex flex-row justify-content-around align-items-center">
    <div class="d-flex flex-row align-items-center">
        <label for="uidSelect" class="col-form-label"># of rows per page:</label>
        <div class="col-3">
            <select id="uidSelect" @bind="@PageSize">
                <option value=10>10</option>
                <option value=20>20</option>
                <option value=30>30</option>
                <option value=40>40</option>
            </select>
        </div>
    </div>
    <div>
        <button class="btn btn-outline-dark btn-sm" @onclick="@(e=>@NavigateTo("first"))">@("<<")</button>
        <button class="btn btn-outline-secondary btn-sm" @onclick="@(e=>@NavigateTo("prev"))">@("<")</button>
        @for (int i = 0; i < TotalPages; i++)
        {
            var pageNumber = i;
            <button class="btn @(CurrentPage == pageNumber ? "btn-primary":"btn-outline-secondary") btn-sm" @onclick="@(e=>UpdateList(pageNumber))">@(i+1)</button>
        }
        <button class="btn btn-outline-secondary btn-sm" @onclick="@(e=>@NavigateTo("next"))">@(">")</button>
        <button class="btn btn-outline-dark btn-sm" @onclick="@(e=>@NavigateTo("last"))">@(">>")</button>
    </div>

</div>
}
<br />
@code{
    [Parameter]
    public RenderFragment GridColumns { get; set; }

    [Parameter]
    public RenderFragment<TItem> GridRow { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter]
    public bool ReloadList { get; set; }

    public List<TItem> ItemList { get; set; }

    private int pageSize = 10;
    private int PageSize
    {
        get
        {
            return pageSize;
        }
        set
        {
            pageSize = value;
            UpdateList(CurrentPage);
        }
    }

    public int TotalPages { get; set; }

    public int CurrentPage { get; set; }


    protected override void OnInitialized()
    {
        PageSize = 10;
        ItemList = Items.Take(PageSize).ToList();
        TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender && ReloadList)
        {
            UpdateList(CurrentPage);
            ReloadList = false;
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    private void UpdateList(int pageNumber = 0)
    {
        TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        pageNumber = pageNumber >= TotalPages - 1 ? TotalPages - 1 : pageNumber;
        //PageNumber * pageSize -> take pageSize
        ItemList = Items.Skip(pageNumber * PageSize).Take(PageSize).ToList();
        CurrentPage = pageNumber;

    }

    private void NavigateTo(string direction)
    {
        if (direction == "prev" && CurrentPage != 0)
            CurrentPage -= 1;

        if (direction == "next" && CurrentPage != TotalPages - 1)
            CurrentPage += 1;

        if (direction == "first")
            CurrentPage = 0;

        if (direction == "last")
            CurrentPage = TotalPages - 1;

        UpdateList(CurrentPage);
    }
}